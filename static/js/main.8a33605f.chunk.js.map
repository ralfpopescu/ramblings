{"version":3,"sources":["static/1.png","static/2.png","static/3.png","static/4.png","static/5.png","static/6.png","static/7.png","static/8.png","static/9.png","static/10.png","static/11.png","static/12.png","static/13.png","static/14.png","static/15.png","static/16.png","static/17.png","static/18.png","static/19.png","static/20.png","components/ImageWrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","styled","div","Image","img","ImageWrapper","src","style","App","images","image1","image2","image3","image4","image5","image6","image7","image8","image9","image10","image11","image12","image13","image14","image15","image16","image17","image18","image19","image20","generateValues","numberOfValues","scale","offset","Array","fill","map","Math","random","useState","length","opacities","setOpacities","skews","setSkews","colorIndices","sketchIndices","image","index","includes","opacity","transform","timeout","enabled","callback","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,+uBCG3C,IAAMC,GAAYC,IAAOC,IAAV,KAITC,GAAQF,IAAOG,IAAV,KAYIC,GANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,MAAR,OACnB,kBAACP,GAAD,KACE,kBAACG,GAAD,CAAOG,IAAKA,EAAKC,MAAOA,M,gGCU5B,IAAMP,GAAYC,IAAOC,IAAV,MAwEAM,OApEf,WACE,IAAMC,EAAS,CACbC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,KAEIC,EAAiB,SAACC,EAAgBC,GAAjB,IAAwBC,EAAxB,uDAAiC,EAAjC,OACrBC,MAAMH,GACHI,KAAKH,GACLI,IAAI,SAAAJ,GAAK,OAAIK,KAAKC,SAAWN,EAAQC,KA1B7B,EA4BqBM,mBAASL,MAAMzB,EAAO+B,QAAQL,KAAK,IA5BxD,mBA4BNM,EA5BM,KA4BKC,EA5BL,OA6BaH,mBAASL,MAAMzB,EAAO+B,QAAQL,KAAK,IA7BhD,mBA6BNQ,EA7BM,KA6BCC,EA7BD,KA+BPC,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACrCC,EAAgB,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAErD,OACE,kBAAC,GAAD,KACGrC,EAAO2B,IACN,SAACW,EAAOC,GAAR,OACEF,EAAcG,SAASD,IACrB,kBAAC,GAAD,CACE1C,IAAKyC,EACLxC,MAAO,CACL2C,QAAST,EAAUO,GACnBG,UAAU,aAAD,OAAeR,EAAMK,GAArB,eAAkCL,EAAMK,GAAxC,YAKlBvC,EAAO2B,IACN,SAACW,EAAOC,GAAR,OACEH,EAAaI,SAASD,IACpB,kBAAC,GAAD,CAAc1C,IAAKyC,EAAOxC,MAAO,CAAE2C,QAAST,EAAUO,QAG5D,kBAAC,IAAD,CACEI,QAAS,IACTC,SAAO,EACPC,SAAU,kBAAMZ,EAAaZ,EAAerB,EAAO+B,OAAQ,OAE7D,kBAAC,IAAD,CACEY,QAAS,IACTC,SAAO,EACPC,SAAU,kBAAMV,EAASd,EAAerB,EAAO+B,OAAQ,UC/E3Ce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8a33605f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.d24aefba.png\";","module.exports = __webpack_public_path__ + \"static/media/2.b7323c20.png\";","module.exports = __webpack_public_path__ + \"static/media/3.dee83c9b.png\";","module.exports = __webpack_public_path__ + \"static/media/4.9b4166ba.png\";","module.exports = __webpack_public_path__ + \"static/media/5.9bce1331.png\";","module.exports = __webpack_public_path__ + \"static/media/6.0e0bd0af.png\";","module.exports = __webpack_public_path__ + \"static/media/7.828eabee.png\";","module.exports = __webpack_public_path__ + \"static/media/8.6bcedd7a.png\";","module.exports = __webpack_public_path__ + \"static/media/9.4c986dbb.png\";","module.exports = __webpack_public_path__ + \"static/media/10.5c6fce74.png\";","module.exports = __webpack_public_path__ + \"static/media/11.3aed845d.png\";","module.exports = __webpack_public_path__ + \"static/media/12.86d2e4e0.png\";","module.exports = __webpack_public_path__ + \"static/media/13.59b16a86.png\";","module.exports = __webpack_public_path__ + \"static/media/14.0d6ec4fe.png\";","module.exports = __webpack_public_path__ + \"static/media/15.0fece275.png\";","module.exports = __webpack_public_path__ + \"static/media/16.a38e7ec7.png\";","module.exports = __webpack_public_path__ + \"static/media/17.6480b68c.png\";","module.exports = __webpack_public_path__ + \"static/media/18.23bb7114.png\";","module.exports = __webpack_public_path__ + \"static/media/19.e667f7cf.png\";","module.exports = __webpack_public_path__ + \"static/media/20.b2d5675a.png\";","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  position: absolute;\n`;\n\nconst Image = styled.img`\n  max-height: 100%;\n  max-width: 100%;\n  transition: all 1s;\n`;\n\nconst ImageWrapper = ({ src, style }) => (\n  <Container>\n    <Image src={src} style={style} />\n  </Container>\n);\n\nexport default ImageWrapper;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport ReactInterval from \"react-interval\";\nimport image1 from \"./static/1.png\";\nimport image2 from \"./static/2.png\";\nimport image3 from \"./static/3.png\";\nimport image4 from \"./static/4.png\";\nimport image5 from \"./static/5.png\";\nimport image6 from \"./static/6.png\";\nimport image7 from \"./static/7.png\";\nimport image8 from \"./static/8.png\";\nimport image9 from \"./static/9.png\";\nimport image10 from \"./static/10.png\";\nimport image11 from \"./static/11.png\";\nimport image12 from \"./static/12.png\";\nimport image13 from \"./static/13.png\";\nimport image14 from \"./static/14.png\";\nimport image15 from \"./static/15.png\";\nimport image16 from \"./static/16.png\";\nimport image17 from \"./static/17.png\";\nimport image18 from \"./static/18.png\";\nimport image19 from \"./static/19.png\";\nimport image20 from \"./static/20.png\";\nimport ImageWrapper from \"./components/ImageWrapper\";\n\nconst Container = styled.div`\n  position: relative;\n`;\n\nfunction App() {\n  const images = [\n    image1,\n    image2,\n    image3,\n    image4,\n    image5,\n    image6,\n    image7,\n    image8,\n    image9,\n    image10,\n    image11,\n    image12,\n    image13,\n    image14,\n    image15,\n    image16,\n    image17,\n    image18,\n    image19,\n    image20\n  ];\n  const generateValues = (numberOfValues, scale, offset = 0) =>\n    Array(numberOfValues)\n      .fill(scale)\n      .map(scale => Math.random() * scale + offset);\n\n  const [opacities, setOpacities] = useState(Array(images.length).fill(0));\n  const [skews, setSkews] = useState(Array(images.length).fill(0));\n\n  const colorIndices = [0, 1, 2, 3, 4, 5, 6, 7];\n  const sketchIndices = [8, 9, 10, 11, 12, 13, 14, 15, 16];\n\n  return (\n    <Container>\n      {images.map(\n        (image, index) =>\n          sketchIndices.includes(index) && (\n            <ImageWrapper\n              src={image}\n              style={{\n                opacity: opacities[index],\n                transform: `translate(${skews[index]}px, ${skews[index]}px)`\n              }}\n            />\n          )\n      )}\n      {images.map(\n        (image, index) =>\n          colorIndices.includes(index) && (\n            <ImageWrapper src={image} style={{ opacity: opacities[index] }} />\n          )\n      )}\n      <ReactInterval\n        timeout={1000}\n        enabled\n        callback={() => setOpacities(generateValues(images.length, 1))}\n      />\n      <ReactInterval\n        timeout={2000}\n        enabled\n        callback={() => setSkews(generateValues(images.length, 10))}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}